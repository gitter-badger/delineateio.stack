version: 2
jobs:

  build_images:
      docker:
      - image: circleci/python:latest

    steps:
      - checkout
      - run: echo "Build images on bock storage!"

  clean:
    docker:
      - image: circleci/python:latest

    steps:
      - checkout
      - run: echo "Clean up here"

  provision:
    docker:
      - image: circleci/python:latest

    steps:
      - checkout
      - run: mkdir -p state
      - run: bash ops/scripts/hashicorp_install.sh "packer" "1.1.3"
      - run: cd ops/provision && ./provision.sh
      - run: bash ops/provision/get_image_id.sh
      - run: mv ops/provision/image_id.txt state/image_id.txt
      - persist_to_workspace:
          root: state
          paths:
            - image_id.txt
          
  deploy:
    docker:
      - image: circleci/python:latest
    steps:
      - checkout
      - attach_workspace:
          at: state
      - run: echo "$(cat state/image_id.txt)"
      - run: bash ops/scripts/hashicorp_install.sh "terraform" "0.11.2"
      - run: bash ops/deploy/deploy.sh "$(cat state/image_id.txt)"
      - run: mv ops/deploy/terraform.tfstate state/terraform.tfstate
      - persist_to_workspace:
          root: state
          paths:
            - terraform.tfstate

  test:
    docker:
      - image: circleci/python:latest
    steps:
      - checkout
      - run: echo "testing here!"

  destroy:
    docker:
      - image: circleci/python:latest
    steps:
      - checkout
      - attach_workspace:
          at: state
      - run: bash ops/scripts/hashicorp_install.sh "terraform" "0.11.2"
      - run: bash ops/scripts/do_install.sh "1.7.1"
      - run: mv state/terraform.tfstate ops/deploy/terraform.tfstate
      - run: bash ops/deploy/destroy.sh "$(cat state/image_id.txt)"


workflows:
  version: 2
  pipeline:
    jobs:
      - build_images
      - clean
      - provision
      - deploy:
          requires:
            - provision
            - clean
            - build_images
      - test:
          requires:
              - deploy
      - approval:
          type: approval
          requires:
           - deploy
      - destroy:
          requires:
            - approval
            - test
            